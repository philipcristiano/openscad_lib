
WIDTH = 100;
HEIGHT = 50;
LENGTH = 200;
THICKNESS = 5;

TAB_LENGTH = 25;

module TabbedPanel(length, width, height, tab_start=true, second_tab_start=false)
{

    difference() {
        cube(size = [length, width, height]);
        tab_offset = tab_start ? 0 : TAB_LENGTH;
        for ( i = [0 : TAB_LENGTH * 2: LENGTH] )
        {
            translate([i  + tab_offset, 0, 0]) cube([TAB_LENGTH , THICKNESS, THICKNESS]);
            translate([i  + tab_offset, width - THICKNESS, 0]) cube([TAB_LENGTH , THICKNESS, THICKNESS]);
        }
        second_tab_offset = second_tab_offset ? 0: TAB_LENGTH;
        for ( i = [0 : TAB_LENGTH * 2: LENGTH] )
        {
            translate([0, i + second_tab_offset, 0]) cube([THICKNESS , TAB_LENGTH, THICKNESS]);
            translate([length - THICKNESS, i + second_tab_offset, 0]) cube([THICKNESS , TAB_LENGTH, THICKNESS]);
        }
    }
}

module Case()
{
    TabbedPanel(LENGTH, WIDTH, THICKNESS);

    // Front
    translate([0, -2* THICKNESS, 0]) rotate([90, 0, 0]) TabbedPanel(LENGTH, HEIGHT, THICKNESS, tab_start=false);

    // Back
    translate([0, WIDTH + 3* THICKNESS, 0]) rotate([90, 0, 0]) TabbedPanel(LENGTH, HEIGHT, THICKNESS, tab_start=false);

    // Left
    translate([-2* THICKNESS, 0, 0]) rotate([0, 270, 0]) TabbedPanel(HEIGHT, WIDTH, THICKNESS, tab_start=true, second_tab_offset=true);

    // Right
    translate([LENGTH + 3 * THICKNESS, 0, 0]) rotate([0, 270, 0]) TabbedPanel(HEIGHT, WIDTH, THICKNESS, tab_start=true, second_tab_offset=true);

    // Top
    translate([0, 0, HEIGHT - THICKNESS]) TabbedPanel(LENGTH, WIDTH, THICKNESS);
}

Case();
